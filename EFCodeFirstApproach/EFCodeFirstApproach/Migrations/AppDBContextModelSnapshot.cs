// <auto-generated />
using System;
using EFCodeFirstApproach.SrcData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCodeFirstApproach.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCodeFirstApproach.SrcData.CarBrand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandID"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("BrandID");

                    b.ToTable("CarBrand");

                    b.HasData(
                        new
                        {
                            BrandID = 1,
                            BrandName = "Honda",
                            Country = "Japan",
                            CreatedAt = new DateTime(1955, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EFCodeFirstApproach.SrcData.CarDetails", b =>
                {
                    b.Property<int>("CarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarID"));

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<int>("CarBrandBrandID")
                        .HasColumnType("int");

                    b.Property<int>("CarTypeTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("CarID");

                    b.HasIndex("CarBrandBrandID");

                    b.HasIndex("CarTypeTypeID");

                    b.ToTable("CarDetails");
                });

            modelBuilder.Entity("EFCodeFirstApproach.SrcData.CarOwner", b =>
                {
                    b.Property<int>("OwnerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarDetailsCarID")
                        .HasColumnType("int");

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("Contact")
                        .HasColumnType("int");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OwnerID");

                    b.HasIndex("CarDetailsCarID");

                    b.ToTable("CarOwner");
                });

            modelBuilder.Entity("EFCodeFirstApproach.SrcData.CarType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeID"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeID");

                    b.ToTable("CarType");

                    b.HasData(
                        new
                        {
                            TypeID = 1,
                            CreateAt = new DateTime(2000, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The Car Is 4*4",
                            TypeName = "OffRoaded"
                        });
                });

            modelBuilder.Entity("EFCodeFirstApproach.SrcData.CarDetails", b =>
                {
                    b.HasOne("EFCodeFirstApproach.SrcData.CarBrand", "CarBrand")
                        .WithMany("CarDetails")
                        .HasForeignKey("CarBrandBrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCodeFirstApproach.SrcData.CarType", "CarType")
                        .WithMany("CarDetails")
                        .HasForeignKey("CarTypeTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarBrand");

                    b.Navigation("CarType");
                });

            modelBuilder.Entity("EFCodeFirstApproach.SrcData.CarOwner", b =>
                {
                    b.HasOne("EFCodeFirstApproach.SrcData.CarDetails", "CarDetails")
                        .WithMany("CarOwner")
                        .HasForeignKey("CarDetailsCarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarDetails");
                });

            modelBuilder.Entity("EFCodeFirstApproach.SrcData.CarBrand", b =>
                {
                    b.Navigation("CarDetails");
                });

            modelBuilder.Entity("EFCodeFirstApproach.SrcData.CarDetails", b =>
                {
                    b.Navigation("CarOwner");
                });

            modelBuilder.Entity("EFCodeFirstApproach.SrcData.CarType", b =>
                {
                    b.Navigation("CarDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
